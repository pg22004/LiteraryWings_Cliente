@page "/sugerencias"
@inject NavigationManager NavigationManager
@using Models
@using Services
@inject ISugerenciaService SugerenciaService

<br />
<br />
<br />
<h1 class="Titulo-Sugerencia">Agrega una sugerencia o comentario</h1>
<br />
@*<MudText Typo="Typo.h3">Sugerencias del usuario</MudText>*@

<div class="Contenedor-Principal-Sugerencia">
    <div class="Contenedor-Secundario-Sugerencia">
        <EditForm Model="sugerencia" OnValidSubmit="OnValidSubmit">
            <div class="Contenedor-Atributos-Sugerencia">
                <MudTextField Label="Nombre" @bind-Value="sugerencia.Nombre" For="@(() => sugerencia.Nombre)" />
                <MudTextField Label="Correo" @bind-Value="sugerencia.Correo" For="@(() => sugerencia.Correo)" />
                <MudTextField Label="Comentario" @bind-Value="sugerencia.Comentario" For="@(() => sugerencia.Comentario)" />
                <div class="Contenedor-Boton-Guardar-Sugerencia">
                    <button class="Boton-Guardar-Sugerencia" ButtonType="ButtonType.Submit" Variant="Variant.Filled">Guardar</button>
                </div>
            </div>
        </EditForm>
        @if (showLeaveAlert)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
        }
    </div>
</div>
@code {
    bool success;
    private bool showLeaveAlert = false;
    Sugerencia sugerencia = new Sugerencia();

    private async Task OnValidSubmit(EditContext context)
    {
        int result = await SugerenciaService.Save(sugerencia);
        if (result == 1)
        {
            success = true;
            StateHasChanged();
            NavigationManager.NavigateTo("Listsuegerencia");
        }
        else
        {
            showLeaveAlert = true;
        }

    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}
